package com.desktop.rhinos.connector;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;

import com.android.rhinos.gest.Campaign;
import com.android.rhinos.gest.Client;
import com.android.rhinos.gest.Consultancy;
import com.android.rhinos.gest.Dni;
import com.android.rhinos.gest.RhFile;
import com.android.rhinos.gest.Service;
import com.android.rhinos.gest.User;

public class DerbyConnector implements Connector {	
	
	private static DerbyConnector INSTANCE;
	private Connection conn;
	
	public synchronized static DerbyConnector getInstance() {
		return (INSTANCE != null) ? INSTANCE : new DerbyConnector();
	}
	
	private Connection createConnection(boolean create) throws SQLException {
		return DriverManager.getConnection("jdbc:derby:./RHINOS.DB;create="+create);
	}
	
	private void shutdownConnection() {
		try {
			DriverManager.getConnection("jdbc:derby:./RHINOS.DB;shutdown=true");
		} 
		catch (SQLException e) {}
	}
	
	private DerbyConnector(){
		
		try {
			boolean createDB = !new File("RHINOS.DB").exists();
			conn = createConnection(createDB);
			new File("RHINOS.DB/docs").mkdir();

			if (createDB) {
				Statement st = conn.createStatement();
				st.executeUpdate("CREATE TABLE login (id INT PRIMARY KEY NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),"
											+ "	username VARCHAR(40),"
											+ "	password VARCHAR(40))");
				
				st.executeUpdate("CREATE TABLE users (id INT PRIMARY KEY,"
											+ " type INT,"
											+ " name VARCHAR(80),"
											+ "	mail VARCHAR(80))");
				
				st.executeUpdate("CREATE TABLE services(id INT PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"
												+ " idUser INT,"
												+ " idClient VARCHAR(40),"
												+ " service VARCHAR(40),"
												+ " campaign VARCHAR(40),"
												+ " commission DOUBLE,"
												+ " date DATE,"
												+ " expiry DATE,"
												+ " state SMALLINT,"
												+ " referencia VARCHAR(40),"
												+ " f_pago SMALLINT,"
												+ " p_neta DOUBLE,"
												+ " ccc VARCHAR(40),"
												+ " cartera SMALLINT,"
												+ " anualizar SMALLINT,"
												+ " notes LONG VARCHAR)");
				
				st.executeUpdate("CREATE TABLE clients(idClient VARCHAR(40) PRIMARY KEY NOT NULL,"
												+ " b_date DATE,"
												+ " name VARCHAR(80),"
												+ " tlf_1 VARCHAR(20),"
												+ " tlf_2 VARCHAR(20),"
												+ " mail VARCHAR(80),"
												+ " consultancy INT)");
				
				st.executeUpdate("CREATE TABLE address(id VARCHAR(20) PRIMARY KEY NOT NULL,"
												+ " tipo_via VARCHAR(20),"
												+ " nombre_via VARCHAR(80),"
												+ " numero VARCHAR(20),"
												+ " portal VARCHAR(20),"
												+ " escalera VARCHAR(20),"
												+ " piso VARCHAR(20),"
												+ " puerta VARCHAR(20),"
												+ " poblacion VARCHAR(80),"
												+ " municipio VARCHAR(80),"
												+ " cp VARCHAR(20))");
				
				st.executeUpdate("CREATE TABLE campaigns(id INT PRIMARY KEY NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),"
												+ "NAME VARCHAR(40))");
				
				st.executeUpdate("CREATE TABLE campinfo(id INT,"
												+ " service VARCHAR(40),"
												+ " commission DOUBLE, "
												+ "	CONSTRAINT PK_CAMPINFO PRIMARY KEY (id, service))");
				
				st.executeUpdate("CREATE TABLE permissions(idUser INT,"
														+ " campaign VARCHAR(40),"
														+ " CONSTRAINT PK_PERMISSIONS PRIMARY KEY (idUser, campaign))");
				
				st.executeUpdate("CREATE TABLE documents(id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),"
													+ " idService INT,"
													+ " name VARCHAR(40),"
													+ " date DATE)");
				
				st.close();
			}
		}
		catch (SQLException e) {e.printStackTrace();}		
	}
	
	public void restartTableSeed(String table, String column) {
		try {
			Statement st = conn.createStatement();
			
			ResultSet rs = st.executeQuery("SELECT MAX("+column+") FROM "+table);
			rs.next();
			int r = rs.getInt(1) +1;
		
			st.executeUpdate("ALTER TABLE "+table+" ALTER COLUMN "+column+" RESTART WITH "+r);
		}
		catch (SQLException e) {e.printStackTrace();}
	}
	
	@Override
	public boolean login(String user, String password) {
		boolean toRet = false;
		try {
			Statement st = conn.createStatement();
			ResultSet r = st.executeQuery("SELECT * FROM login NATURAL JOIN users WHERE username='"+user+"' "
											+ "AND password='"+password+"'");
			if (r.next()) {
	        	App.USER.setExtId(r.getInt("id"));
	        	App.USER.setType(r.getInt("type"));
	        	App.USER.setUser(user);
	        	App.USER.setName(r.getString("name"));
	        	App.USER.setMail(r.getString("mail"));
	        	toRet = true;
			}
			
			st.close();
		} 
		catch (SQLException e) {e.printStackTrace();}
		return toRet;
	}

	@Override
	public void clearCampaigns() {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean addCampaign(Campaign camp) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public ArrayList<Campaign> getCampaigns(User u) {
		ArrayList<Campaign> tr = new ArrayList<Campaign>();
	    try {
	    	Statement st = conn.createStatement();
	    	ResultSet r;
	    	if (u.isRoot())
	    		r = st.executeQuery("SELECT * FROM campaigns NATURAL JOIN campinfo");
	    	else
	    		r = st.executeQuery("SELECT * FROM campaigns NATURAL JOIN campinfo "
	    								+ "WHERE name IN (SELECT campaign FROM permissions WHERE idUser="+u.getExtId()+")");
    		Campaign camp = null;
    		String name, old = null;

	    	while (r.next()) {	    		
	    		//checking it is the first row
	    		if (camp == null) {
	    			name = r.getString("name");
	    			old = name;
	    			camp = new Campaign(name);
	    		}
	    		
				if (!(name = r.getString("name")).equals(old)) {
					tr.add(camp);
					old = name;
					camp = new Campaign(name);
				}
					
				String service = r.getString("service");
				camp.addService(service , new Service(service, r.getInt("commission")));
			}
			tr.add(camp);
	    }
	    catch (SQLException e) {e.printStackTrace();}
        return tr;
	}

	@Override
	public boolean addClient(Client c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean editClient(Client c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public ArrayList<Client> getClients(User u) {
		ArrayList<Client> tr = new ArrayList<>();
		try {
	    	Statement st = conn.createStatement();
	    	ResultSet r;
	    	
	    	if (u.isRoot())
	    		r = st.executeQuery("SELECT idClient, name, b_date, tlf_1 FROM CLIENTS");
	    	else
	    		r = st.executeQuery("SELECT DISTINCT clients.idClient, name, b_date, tlf_1 "
	    									+ "FROM clients, services "
	    									+ "WHERE (clients.idClient = services.idClient) AND (idUser="+u.getExtId()+")");
	    	
			while (r.next()) {	
				Client cl = new Client();
				cl.setId(new Dni(r.getString("idClient")));
				cl.setBDate(new Date(r.getString("b_date").replace("-", "/")));
				cl.setName(r.getString("name"));
				cl.setTlf_1(r.getString("tlf_1"));
				
				tr.add(cl);
			}
	    }
	    catch (Exception e) {e.printStackTrace();}
		
		return tr;
	}

	@Override
	public ArrayList<Client> getCampaignClients(Campaign c, User u) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Client clientExists(String id) {
		Client client = null;
		try {
			Statement st = conn.createStatement();
			ResultSet r = st.executeQuery("SELECT * FROM clients INNER JOIN address ON (id=idClient) WHERE id='"+id+"'");
		
		    while (r.next()) {
				client = new Client();
				client.setId(new Dni(id));
				client.setBDate(new Date(r.getString("b_date").replace("-", "/")));
				
				client.setName(r.getString("name"));
				client.setTlf_1(r.getString("tlf_1"));
				client.setTlf_2(r.getString("tlf_2"));
				client.setMail(r.getString("mail"));
				client.setConsultancy(r.getInt("consultancy"));
				
				client.setDirTipoVia(r.getString("tipo_via"));
				client.setDirNombreVia(r.getString("nombre_via"));
				client.setDirNumero(r.getString("numero"));
				client.setDirPortal(r.getString("portal"));
				client.setDirEscalera(r.getString("escalera"));
				client.setDirPiso(r.getString("piso"));
				client.setDirPuerta(r.getString("puerta"));
				client.setDirPoblacion(r.getString("poblacion"));
				client.setDirMunicipio(r.getString("municipio"));
				client.setDirCp(r.getString("cp"));
			}
	    }
	    catch (SQLException e) {e.printStackTrace();}

		return client;
	}

	@Override
	public boolean addService(int userId, Service s, Client c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public ArrayList<Service> getServices(String id) {
		ArrayList<Service> tr = new ArrayList<Service>();
		try {
			Statement st = conn.createStatement();
			ResultSet r = st.executeQuery("SELECT * FROM services WHERE idClient='"+id+"' ORDER BY date");
			while (r.next()) {
				Service s = new Service(r.getString("service"), r.getDouble("commission"));
				s.setExtId(r.getInt("id"));
				s.setCampaign(r.getString("campaign"));
				s.setDate(new Date(r.getString("date").replace("-", "/")));
				s.setExpiryDate(new Date(r.getString("expiry").replace("-", "/")));
				s.setState(r.getInt("state"));
				
				s.setNotes(r.getString("notes"));
				s.setReferencia(r.getString("referencia"));
				s.setF_pago(r.getInt("f_pago"));
				s.setpNeta(r.getDouble("p_neta"));
				s.setCcc(r.getString("ccc"));
				s.setCartera(r.getInt("cartera") > 0);
				s.setAnualizar(r.getInt("anualizar") > 0);
				
				tr.add(s);				
			}
		}
		catch (SQLException e) {e.printStackTrace();}
		
		return tr;	
	}

	@Override
	public void deleteService(Service service) {
		// TODO Auto-generated method stub

	}

	@Override
	public void editService(Service s) {
		// TODO Auto-generated method stub

	}

	@Override
	public void editServiceCommission(int serviceId, double commission) {
		// TODO Auto-generated method stub

	}

	@Override
	public ArrayList<Service> getUserServices(User u) {
		ArrayList<Service> tr = new ArrayList<Service>();
		Calendar cal = new GregorianCalendar();
		cal.add(Calendar.DAY_OF_MONTH, 7);
		
		try {
			Statement st = conn.createStatement();
			ResultSet r = st.executeQuery("	SELECT Services.id, Clients.idClient, name, campaign, service, date, expiry, commission, state, notes, "
												+ "referencia, f_pago, p_neta, ccc, cartera, anualizar "
												+ "FROM Clients, Services "
											+"WHERE (idUser="+u.getExtId()+") AND "
												+"(Clients.idClient = Services.idClient) AND "
												+"((state = 1 AND cartera = 1) OR (YEAR(date) ="+cal.get(Calendar.YEAR)+")) AND "
												+"(MONTH(date) = "+(cal.get(Calendar.MONTH) +1)+")");
			
			while (r.next()) {
				Service s = new Service(r.getString("service"), r.getDouble("commission"));
				
				s.setExtId(r.getInt("id"));
				s.setCampaign(r.getString("campaign"));
				s.setDate(new Date(r.getString("date").replace("-", "/")));
				s.setExpiryDate(new Date(r.getString("expiry").replace("-", "/")));
				s.setState(r.getInt("state"));
				s.setNotes(r.getString("notes"));
				
				s.setReferencia(r.getString("referencia"));
				s.setF_pago(r.getInt("f_pago"));
				s.setpNeta(r.getDouble("p_neta"));
				s.setCcc(r.getString("ccc"));
				s.setCartera(r.getInt("cartera") > 0);
				s.setAnualizar(r.getInt("anualizar") > 0);
				
				s.setId(new Dni(r.getString("idClient")));
				s.setTitular(r.getString("name"));
				
				tr.add(s);				
			}
		}
		catch (SQLException e) {e.printStackTrace();}
		
		return tr;			
	}

	@Override
	public ArrayList<Service> getUserServicesByDate(User u, Date date_in, Date date_out, int date_type) {
		ArrayList<Service> tr = new ArrayList<Service>();
		SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd");

		try {
			String d_type = (date_type == 0) ? "date" : "expiry";
			Statement st = conn.createStatement();
			ResultSet r = st.executeQuery (" SELECT services.id, clients.idClient, name, campaign, service, "
													+ "date, expiry, commission, state, notes, referencia, "
													+ "f_pago, p_neta, ccc, cartera, anualizar "
												+ "FROM Clients, Services "
												+ "WHERE (idUser="+u.getExtId()+" AND clients.idClient=services.idClient) "
												+ "AND ("+d_type+" >= '"+f.format(date_in)+"' AND "+d_type+" <= '"+f.format(date_out)+"') ORDER BY date");
			while (r.next()) {
				Service s = new Service(r.getString("service"), r.getDouble("commission"));
								
				s.setExtId(r.getInt("id"));
				s.setCampaign(r.getString("campaign"));
				s.setDate(new Date(r.getString("date").replace("-", "/")));
				s.setExpiryDate(new Date(r.getString("expiry").replace("-", "/")));
				s.setState(r.getInt("state"));
				s.setNotes(r.getString("notes"));
				
				s.setReferencia(r.getString("referencia"));
				s.setF_pago(r.getInt("f_pago"));
				s.setpNeta(r.getDouble("p_neta"));
				s.setCcc(r.getString("ccc"));
				s.setCartera(r.getInt("cartera") > 0);
				s.setAnualizar(r.getInt("anualizar") > 0);
				
				s.setId(new Dni(r.getString("idClient")));
				s.setTitular(r.getString("name"));
				
				tr.add(s);
			}
			
			st.close();
			
		}
		catch (SQLException e) {e.printStackTrace();}
		
		return tr;
	}

	@Override
	public void deleteClient(String id) {
		// TODO Auto-generated method stub

	}

	@Override
	public void changePassword(String user, String newpass) {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean createAccount(User u, String pass, boolean sendMail) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public String getCurrentVersion() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<User> getUsers() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public User getUserById(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<String> getAuthorizedCampaigns(User user) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void grantCampaignPermission(User user, Campaign campaign) {
		// TODO Auto-generated method stub

	}

	@Override
	public void removeCampaingPermission(User user, Campaign campaign) {
		// TODO Auto-generated method stub

	}

	@Override
	public ArrayList<Consultancy> getConsultancy() {
		// TODO Auto-generated method stub
		return new ArrayList<Consultancy>();
	}

	@Override
	public Consultancy getConsultancy(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean editConsultancy(Consultancy c) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void deleteConsultancy(int id) {
		// TODO Auto-generated method stub

	}

	@Override
	public void deleteAccount(int id) {
		// TODO Auto-generated method stub

	}

	@Override
	public ArrayList<User> getUserChildren(User user) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void editUserParent(int extId, int idParent, double comm) {
		// TODO Auto-generated method stub

	}

	@Override
	public ArrayList<ArrayList<User>> getUserStructure(User user) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean addConsultancy(Consultancy consultancy) {
		// TODO Auto-generated method stub
		return false;
	}
	
	@Override
	public ArrayList<HashMap<String, Object>> getLoginInfo() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public ArrayList<HashMap<String, Object>> getUsersInfo() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<HashMap<String, Object>> getServicesInfo() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public ArrayList<HashMap<String, Object>> getClientsInfo() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public ArrayList<HashMap<String, Object>> getAddressInfo() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public ArrayList<HashMap<String, Object>> getCampaignsInfo() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public ArrayList<HashMap<String, Object>> getCampinfoInfo() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public ArrayList<HashMap<String, Object>> getPermissionsInfo() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public ArrayList<HashMap<String, Object>> getDocumentsTableInfo() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public void addDocument(File f, int toModify, String r) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public User getUserParent(int extId) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public void deleteDocument(int id) {
		// TODO Auto-generated method stub
	
	}
	
	@Override
	public File getDocument(int idDocument) {
		File f = null;
	    try {
	    	Statement st = conn.createStatement();
	    	ResultSet r = st.executeQuery("SELECT name FROM documents WHERE id="+idDocument);
	    	r.next();
        	f = new File("./RHINOS.DB/docs/"+r.getString("name")+".pdf");
	    }
	    catch (Exception e) {e.printStackTrace();}
	    
	    return f;
	}
	
	@Override
	public ArrayList<RhFile> getDocumentsInfo(int idservice) {
		ArrayList<RhFile> infoFiles = new ArrayList<RhFile>();
		
		try {
			Statement st = conn.createStatement();
			ResultSet r = st.executeQuery("SELECT id, name, date FROM documents "
										+ "WHERE idService="+idservice+" "
										+ "ORDER BY date");
			
			while (r.next()) {
				RhFile f  = new RhFile();
				f.setName(r.getString("name"));
				f.setId(r.getInt("id"));
				f.setIdService(idservice);
				f.setDate(new Date(r.getString("date").replace("-", "/")));
				
				infoFiles.add(f);
			}
		}
		catch (Exception e) {e.printStackTrace();}
		
		return infoFiles;
	}
	
	//MIGRATE
	@Override
	public void setLoginInfo(ArrayList<HashMap<String, Object>> array) {
		try {
			Statement st = conn.createStatement();
			for (HashMap<String, Object> h : array) {
				st.execute("INSERT INTO login (username, password) VALUES("
												+ "'"+h.get("user")+"',"
												+ "'"+h.get("password")+"')");
			}
			st.close();
			shutdownConnection();
			conn = createConnection(false);
		}
		catch (SQLException e) {}
	}
	
	@Override
	public void setUsersInfo(ArrayList<HashMap<String, Object>> array) {
		try {
			Statement st = conn.createStatement();
			for (HashMap<String, Object> h : array) {
				st.execute("INSERT INTO users (id, type, name, mail) VALUES("
												+h.get("id")+","
												+h.get("type")+","
												+"'"+h.get("name")+"',"
												+"'"+h.get("mail")+"')");
			}
			st.close();
			shutdownConnection();
			conn = createConnection(false);
		}
		catch (SQLException e) {e.printStackTrace();}
	}
	
	@Override
	public void setClientsInfo(ArrayList<HashMap<String, Object>> array) {
		try {
			Statement st = conn.createStatement();
			for (HashMap<String, Object> h : array) {
				st.execute("INSERT INTO clients (idclient, b_date, name, tlf_1, tlf_2, mail, consultancy) "
									+ "VALUES('"+h.get("id")+"',"
												+"'"+h.get("b_date")+"',"
												+"'"+h.get("name")+"',"
												+"'"+h.get("tlf_1")+"',"
												+"'"+h.get("tlf_2")+"',"
												+"'"+h.get("mail")+"',"
												+h.get("consultancy")+")");
			}
			st.close();
			shutdownConnection();
			conn = createConnection(false);
		}
		catch (SQLException e) {e.printStackTrace();}
	}
	
	@Override
	public void setServicesInfo(ArrayList<HashMap<String, Object>> array) {
		try {
			Statement st = conn.createStatement();
			for (HashMap<String, Object> h : array) {
				st.executeUpdate("INSERT INTO services (id, idUser, idClient, service, "
											+ "campaign, commission, date, expiry, "
											+ "state, referencia, f_pago, p_neta, "
											+ "ccc, cartera, anualizar, notes) "
											+ "VALUES(" +h.get("id")+", "
														+h.get("idUser")+","
														+"'"+h.get("idClient")+"',"
														+"'"+h.get("service")+"',"
														+"'"+h.get("campaign")+"',"
														+h.get("commission")+","
														+"'"+h.get("date")+"',"
														+"'"+h.get("expiry")+"',"
														+h.get("state")+","
														+"'"+h.get("referencia")+"',"
														+h.get("f_pago")+","
														+h.get("p_neta")+","
														+"'"+h.get("ccc")+"',"
														+h.get("cartera")+","
														+h.get("anualizar")+","
														+"'"+h.get("notes")+"')");
			}
			st.close();
			shutdownConnection();
			conn = createConnection(false);
		}
		catch (SQLException e) {e.printStackTrace();}
		finally {
			restartTableSeed("Services", "id");
		}
	}
	
	@Override
	public void setAddressInfo(ArrayList<HashMap<String, Object>> array) {
		try {
			Statement st = conn.createStatement();
			for (HashMap<String, Object> h : array) {
				st.executeUpdate("INSERT INTO address (id, tipo_via, nombre_via, "
											+ "numero, portal, escalera, piso, "
											+ "puerta, poblacion, municipio, cp) "
											+ "VALUES(" +"'"+h.get("id")+"',"
														+"'"+h.get("tipo_via")+"',"
														+"'"+h.get("nombre_via")+"',"
														+"'"+h.get("numero")+"',"
														+"'"+h.get("portal")+"',"
														+"'"+h.get("escalera")+"',"
														+"'"+h.get("piso")+"',"
														+"'"+h.get("puerta")+"',"
														+"'"+h.get("poblacion")+"',"
														+"'"+h.get("municipio")+"',"
														+"'"+h.get("cp")+"')");
			}
			st.close();
			shutdownConnection();
			conn = createConnection(false);
		}
		catch (SQLException e) {e.printStackTrace();}	
	}
	
	@Override
	public void setCampaignsInfo(ArrayList<HashMap<String, Object>> array) {
		try {
			Statement st = conn.createStatement();
			for (HashMap<String, Object> h : array) {
				st.executeUpdate("INSERT INTO campaigns(name) VALUES('"+h.get("name")+"')");
			}
			st.close();
			shutdownConnection();
			conn = createConnection(false);
		}
		catch (SQLException e) {e.printStackTrace();}			
	}
	
	@Override
	public void setCampinfoInfo(ArrayList<HashMap<String, Object>> array) {
		try {
			Statement st = conn.createStatement();
			for (HashMap<String, Object> h : array) {
				st.executeUpdate("INSERT INTO campinfo(id, service, commission) "
						+ "VALUES("+h.get("id")+", '"+((String)h.get("service")).replace("'", "")+"', "+h.get("commission")+")");
			}
			st.close();
			shutdownConnection();
			conn = createConnection(false);
		}
		catch (SQLException e) {e.printStackTrace();}	
	}
	
	@Override
	public void setPermissionsInfo(ArrayList<HashMap<String, Object>> array) {
		try {
			Statement st = conn.createStatement();
			for (HashMap<String, Object> h : array) {
				st.executeUpdate("INSERT INTO permissions(idUser, campaign)"
						+ " VALUES("+h.get("idUser")+", '"+h.get("campaign")+"')");
			}
			st.close();
			shutdownConnection();
			conn = createConnection(false);
		}
		catch (SQLException e) {e.printStackTrace();}	
	}
	
	@Override
	public void setDocumentsTableInfo(ArrayList<HashMap<String, Object>> array) {
		
		try {
			Statement st = conn.createStatement();
			for (HashMap<String, Object> h : array) {
				String f_name = new Date().getTime()+"";
				st.executeUpdate("INSERT INTO documents(id, idService, name, date)"
											+ " VALUES("+h.get("id")+", "
														+h.get("idService")+", "
														+"'"+f_name+"', "
														+"'"+h.get("date")+"')");
				
				Path source = Paths.get(((File)h.get("doc")).toURI());
				Path target = Paths.get(new File("./RHINOS.DB/docs/"+f_name+".pdf").toURI());
				Files.copy(source, target);
			}
			st.close();
			shutdownConnection();
			conn = createConnection(false);
		}
		catch (Exception e) {e.printStackTrace();}
		finally {
			restartTableSeed("documents", "id");
		}
	}
}
